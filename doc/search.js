window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "DataBinder", "modulename": "DataBinder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Algorithms", "modulename": "DataBinder.Algorithms", "kind": "module", "doc": "<p>Algorithms.</p>\n"}, {"fullname": "DataBinder.Algorithms.assign_entity_environments", "modulename": "DataBinder.Algorithms", "qualname": "assign_entity_environments", "kind": "function", "doc": "<p>Assigning each Entity an environment based on the\nCANGEN algorithm.[2]</p>\n\n<ol>\n<li><p>Create initial invariants for entities based on:\na. Number of creating transformations\nb. Number of using transformations</p></li>\n<li><p>Transform the initial invariants into ranks\n(Rank according to sum of creating + using transformations)\nNote that two entities can have the same rank\n(-> actually, ranking can be left out for small numbers of invariants)</p></li>\n<li><p>Map each rank to a corresponding prime</p></li>\n<li><p>Create a new invariant where the primes of\nneighbors are multiplied.</p>\n\n<p>Neighbours are any entity attached to the same transformation.</p></li>\n<li><p>Determine new ranks based on\na. old ranks\nb. new invariants</p></li>\n<li><p>Repeat from 2 with new ranks until ranking is stable</p></li>\n</ol>\n\n<p>If entities are symmetric, they should have the same rank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>labels</strong> (dict):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Algorithms.assign_transformation_environments", "modulename": "DataBinder.Algorithms", "qualname": "assign_transformation_environments", "kind": "function", "doc": "<p>Assigning each Tranformation an environment based on the\nCANGEN algorithm.[2]</p>\n\n<ol>\n<li><p>Create initial invariants for transformations based on:\na. Number of entities used by the transformation\nb. Number of entities created by the transformation</p></li>\n<li><p>Transform the initial invariants into ranks\n(Rank according to sum of used + created entities)\nNote that two transformations can have the same rank\n(-> actually, ranking can be left out for small numbers of invariants)</p></li>\n<li><p>Map each rank to a corresponding prime</p></li>\n<li><p>Create a new invariant where the primes of\nneighbors are multiplied.</p>\n\n<p>Neighbours are any entity attached to the same entity.</p></li>\n<li><p>Determine new ranks based on\na. old ranks\nb. new invariants</p></li>\n<li><p>Repeat from 2 with new ranks until ranking is stable</p></li>\n</ol>\n\n<p>If transformations are symmetric, they should have the same rank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>labels</strong> (dict):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Assumptions", "modulename": "DataBinder.Assumptions", "kind": "module", "doc": "<p>For applying assumptions to topologies (e.g. fast pre-equilibrium,\netc.)</p>\n"}, {"fullname": "DataBinder.Assumptions.pseudo_first_order_transformation", "modulename": "DataBinder.Assumptions", "qualname": "pseudo_first_order_transformation", "kind": "function", "doc": "<p>Apply a pseudo first-order approximation for specific transformation\n(specified by its token) in a topology containing the entity specified by\nthe entity token.</p>\n\n<p>All constants involving this entity are removed/become 0.0?</p>\n\n<ul>\n<li>Find all transformation connected to the entity</li>\n<li>Create new transformations without the entity present.</li>\n<li>Delete the transformations containing the entity</li>\n<li>Delete the entity</li>\n<li>Add the newly created transformations (copies of deleted ones without the\nentity)</li>\n</ul>\n\n<p>(or some variation of the above)</p>\n\n<p>TODO: May need some kind of tag to remind that the assumption has been\napplied.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n<li><p><strong>entity</strong> (str):\nToken for the entity to be removed by the approximation.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nModified topology.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">transformation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Assumptions.pseudo_first_order_entity", "modulename": "DataBinder.Assumptions", "qualname": "pseudo_first_order_entity", "kind": "function", "doc": "<p>Apply a pseudo first-order approximation for all transformations in a\ntopology containing the entity specified by the entity token.</p>\n\n<p>All constants involving this entity are removed/become 0.0?</p>\n\n<ul>\n<li>Find all transformation connected to the entity</li>\n<li>Create new transformations without the entity present.</li>\n<li>Delete the transformations containing the entity</li>\n<li>Delete the entity</li>\n<li>Add the newly created transformations (copies of deleted ones without the\nentity)</li>\n</ul>\n\n<p>(or some variation of the above)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n<li><p><strong>entity</strong> (str):\nToken for the entity to be removed by the approximation.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nModified topology.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Assumptions.pre_equilibrium", "modulename": "DataBinder.Assumptions", "qualname": "pre_equilibrium", "kind": "function", "doc": "<p>Applies a pre-equilibrium approximation to a transformation.</p>\n\n<ul>\n<li>The transformation and the entities involved are removed.</li>\n<li>New transformations bridging the 'dangling' transformations are created\nand added to the topology. They contain new tokens corresponding to\nthe combination of the removed entities.</li>\n</ul>\n\n<p>A \u2190 B \u2190\u2192 C \u2192 D</p>\n\n<p>E \u2192 B</p>\n\n<p>F \u2192 C</p>\n\n<p>After pre-equilibrium approximation:</p>\n\n<p>B and C turn into Z, portions of which react to form D, and other portions\nreact to form A.</p>\n\n<p>E and F both produce Z</p>\n\n<p>Z = B + C</p>\n\n<p>Z * constant \u2192 A</p>\n\n<p>Z * 1/constant \u2192 D</p>\n\n<p>E \u2192 Z</p>\n\n<p>F \u2192 Z</p>\n\n<blockquote>\n  <blockquote>\n    <p>Replacements with a additional constants. &lt;&lt;</p>\n  </blockquote>\n</blockquote>\n\n<p>Bimolecular reactions?</p>\n\n<p>A + B \u2192 C + D</p>\n\n<p>K = A<em>B/C</em>D</p>\n\n<p>A = K<em>C</em>D/B = K<em>(C</em>D/B)</p>\n\n<p>B = K<em>C</em>D/A = K<em>(C</em>D/A)</p>\n\n<p>C = A<em>B/K</em>D = 1/K<em>(A</em>B/D)</p>\n\n<p>D = A<em>B/K</em>C = 1/K<em>(A</em>B/C)</p>\n\n<p>Z = A + B + C + D</p>\n\n<p>What about when entities are involved in multiple pre-equilibria?</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n<li><p><strong>transformation</strong> (str):\nToken for transformation to apply assumption to.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nModified topology.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">transformation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Binders", "modulename": "DataBinder.Binders", "kind": "module", "doc": "<p>For binding data to topologies.</p>\n"}, {"fullname": "DataBinder.Binders.validate", "modulename": "DataBinder.Binders", "qualname": "validate", "kind": "function", "doc": "<p>Check the data and topology for compatibility, omissions in data, etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>data</strong> (DataBinder.Classes.DataContainer):</p></li>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>error_report</strong> (list[str]):\nList of error messages.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">data_container</span><span class=\"o\">.</span><span class=\"n\">DataContainer</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Binders.bind_data_topology", "modulename": "DataBinder.Binders", "qualname": "bind_data_topology", "kind": "function", "doc": "<p>Bind data and topology together into a model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>data</strong> (DataBinder.Classes.DataContainer):</p></li>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nTopology containing information from the data conditions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">data_container</span><span class=\"o\">.</span><span class=\"n\">DataContainer</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes", "modulename": "DataBinder.Classes", "kind": "module", "doc": "<p>Structures encapsulating data.</p>\n"}, {"fullname": "DataBinder.Classes.DataContainer", "modulename": "DataBinder.Classes", "qualname": "DataContainer", "kind": "class", "doc": "<p>An structure for storing experimental data and\nconditions.</p>\n"}, {"fullname": "DataBinder.Classes.DataContainer.__init__", "modulename": "DataBinder.Classes", "qualname": "DataContainer.__init__", "kind": "function", "doc": "<p>Create an empty DataContainer.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>filename</strong> (str):</p></li>\n<li><p><strong>experiment_code</strong> (str):</p></li>\n<li><p><strong>value_conditions</strong> (list[DataBinder.Classes.ConditionValue]):</p></li>\n<li><p><strong>array_conditions</strong> (list[DataBinder.Classes.ConditionArray]):</p></li>\n<li><p><strong>analysis_details</strong> (dict()):</p></li>\n<li><p><strong>series_values</strong> (numpy.ndarray):</p></li>\n<li><p><strong>series_unit</strong> (str):</p></li>\n<li><p><strong>data</strong> (dict()):</p></li>\n<li><p><strong>errors</strong> (dict()):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "DataBinder.Classes.DataContainer.filename", "modulename": "DataBinder.Classes", "qualname": "DataContainer.filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.DataContainer.experiment_code", "modulename": "DataBinder.Classes", "qualname": "DataContainer.experiment_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.DataContainer.value_conditions", "modulename": "DataBinder.Classes", "qualname": "DataContainer.value_conditions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[DataBinder.Classes.conditions.ConditionValue]"}, {"fullname": "DataBinder.Classes.DataContainer.array_conditions", "modulename": "DataBinder.Classes", "qualname": "DataContainer.array_conditions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[DataBinder.Classes.conditions.ConditionArray]"}, {"fullname": "DataBinder.Classes.DataContainer.series_values", "modulename": "DataBinder.Classes", "qualname": "DataContainer.series_values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "DataBinder.Classes.DataContainer.series_unit", "modulename": "DataBinder.Classes", "qualname": "DataContainer.series_unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.DataContainer.data", "modulename": "DataBinder.Classes", "qualname": "DataContainer.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.DataContainer.errors", "modulename": "DataBinder.Classes", "qualname": "DataContainer.errors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology", "modulename": "DataBinder.Classes", "qualname": "Topology", "kind": "class", "doc": "<p>Stores the relationships between Entities, Transformations and their\nderived types in a system.</p>\n"}, {"fullname": "DataBinder.Classes.Topology.__init__", "modulename": "DataBinder.Classes", "qualname": "Topology.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>entities</strong> (dict()):\nEntities are things like chemical compounds.</li>\n<li><strong>transformations</strong> (dict()):\nTransformations connect entities (like chemical\nreactions connect compounds)</li>\n<li><strong>constants</strong> (dict()):\nConstants are floats to mulitply certain entities by.</li>\n<li><strong>inputs</strong> (dict()):\nInputs into the systems (transformation-like)\n<ul>\n<li>connects a constant to an entity.</li>\n</ul></li>\n<li><strong>outputs</strong> (dict()):\nOutputs from the system (transformation-like)\n<ul>\n<li>connects an entity to a constant.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "DataBinder.Classes.Topology.entities", "modulename": "DataBinder.Classes", "qualname": "Topology.entities", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology.transformations", "modulename": "DataBinder.Classes", "qualname": "Topology.transformations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology.constants", "modulename": "DataBinder.Classes", "qualname": "Topology.constants", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology.inputs", "modulename": "DataBinder.Classes", "qualname": "Topology.inputs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology.outputs", "modulename": "DataBinder.Classes", "qualname": "Topology.outputs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "DataBinder.Classes.Topology.add_entity", "modulename": "DataBinder.Classes", "qualname": "Topology.add_entity", "kind": "function", "doc": "<p>Add an entity to the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>addition</strong> (DataBinder.Classes.Entity):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">addition</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.remove_entity", "modulename": "DataBinder.Classes", "qualname": "Topology.remove_entity", "kind": "function", "doc": "<p>Remove an entity from the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>removal</strong> (DataBinder.Classes.Entity):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">removal</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.add_transformation", "modulename": "DataBinder.Classes", "qualname": "Topology.add_transformation", "kind": "function", "doc": "<p>Add a transformation to the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>addition</strong> (DataBinder.Classes.Transformation):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">addition</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Transformation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.remove_transformation", "modulename": "DataBinder.Classes", "qualname": "Topology.remove_transformation", "kind": "function", "doc": "<p>Remove a transformation from the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>removal</strong> (DataBinder.Classes.Transformation):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">removal</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Transformation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.add_constant", "modulename": "DataBinder.Classes", "qualname": "Topology.add_constant", "kind": "function", "doc": "<p>Add a constant to the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cons</strong> (DataBinder.Classes.Constant):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cons</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Constant</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.add_input", "modulename": "DataBinder.Classes", "qualname": "Topology.add_input", "kind": "function", "doc": "<p>Add an input to the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inp</strong> (DataBinder.Classes.Input):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Input</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.add_output", "modulename": "DataBinder.Classes", "qualname": "Topology.add_output", "kind": "function", "doc": "<p>Add an output to the topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inp</strong> (DataBinder.Classes.Output):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Output</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.get_forward_entities", "modulename": "DataBinder.Classes", "qualname": "Topology.get_forward_entities", "kind": "function", "doc": "<p>Find all entities that a given entity is transformed into.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Entity</strong> (DataBinder.Classes.Entity):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>forward_entities</strong> (list[Entity]):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.get_backward_entities", "modulename": "DataBinder.Classes", "qualname": "Topology.get_backward_entities", "kind": "function", "doc": "<p>Find all entities that contribute to creating the given entity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Entity</strong> (DataBinder.Classes.Entity):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>backward_entities</strong> (list[Entity]):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Topology.get_surrounding_entities", "modulename": "DataBinder.Classes", "qualname": "Topology.get_surrounding_entities", "kind": "function", "doc": "<p>Find all of the entities surrounding the given entity (those connected\nto the same transformations as it is).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Entity</strong> (DataBinder.Classes.Entity):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>surrounding_entities</strong> (list[Entity]):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Entity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Entity", "modulename": "DataBinder.Classes", "qualname": "Entity", "kind": "class", "doc": "<p>An individual unit in a structure.</p>\n"}, {"fullname": "DataBinder.Classes.Entity.__init__", "modulename": "DataBinder.Classes", "qualname": "Entity.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>iden</strong> (str):\nUnique id for the entity</li>\n<li><strong>created_by</strong> (list[str]):\nList of ids of Transformations which create this\nentity.</li>\n<li><strong>required_by</strong> (list[str]):\nList of ids of Transformations which use this\nentity in a transformation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Entity.id", "modulename": "DataBinder.Classes", "qualname": "Entity.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.Entity.created_by", "modulename": "DataBinder.Classes", "qualname": "Entity.created_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "DataBinder.Classes.Entity.required_by", "modulename": "DataBinder.Classes", "qualname": "Entity.required_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "DataBinder.Classes.Entity.associated_transformation_keys", "modulename": "DataBinder.Classes", "qualname": "Entity.associated_transformation_keys", "kind": "function", "doc": "<p>Get the combined keys of transformations which create the entity and\ntransformations which require the entity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Constant", "modulename": "DataBinder.Classes", "qualname": "Constant", "kind": "class", "doc": "<p>A structure for storing constants.</p>\n\n<p>An alias for Entity, emphasising that it is derived from data.</p>\n", "bases": "DataBinder.Classes.topology_components.Entity"}, {"fullname": "DataBinder.Classes.Constant.__init__", "modulename": "DataBinder.Classes", "qualname": "Constant.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>iden</strong> (str):\nUnique id for the entity</li>\n<li><strong>created_by</strong> (list[str]):\nList of ids of Transformations which create this\nentity.</li>\n<li><strong>required_by</strong> (list[str]):\nList of ids of Transformations which use this\nentity in a transformation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Constant.value", "modulename": "DataBinder.Classes", "qualname": "Constant.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "DataBinder.Classes.Transformation", "modulename": "DataBinder.Classes", "qualname": "Transformation", "kind": "class", "doc": "<p>A transformation describes the conversion between entities.</p>\n"}, {"fullname": "DataBinder.Classes.Transformation.__init__", "modulename": "DataBinder.Classes", "qualname": "Transformation.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>iden</strong> (str):\nUnique id for the transformations.</li>\n<li><strong>requires</strong> (list[str]):\nList of ids of entities which are required by this\ntransformation.</li>\n<li><strong>creates</strong> (list[str]):\nList of ids of entities which are created by this\ntransformation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Transformation.id", "modulename": "DataBinder.Classes", "qualname": "Transformation.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.Transformation.requires", "modulename": "DataBinder.Classes", "qualname": "Transformation.requires", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "DataBinder.Classes.Transformation.creates", "modulename": "DataBinder.Classes", "qualname": "Transformation.creates", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "DataBinder.Classes.Transformation.associated_entity_keys", "modulename": "DataBinder.Classes", "qualname": "Transformation.associated_entity_keys", "kind": "function", "doc": "<p>Get all of the entities required and created by the transformation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Classes.Input", "modulename": "DataBinder.Classes", "qualname": "Input", "kind": "class", "doc": "<p>A structure for storing input data.</p>\n\n<p>This is an alias for a Transformation to emphasise its derivation from\nconditional information.</p>\n", "bases": "DataBinder.Classes.topology_components.Transformation"}, {"fullname": "DataBinder.Classes.Input.__init__", "modulename": "DataBinder.Classes", "qualname": "Input.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>iden</strong> (str):\nUnique id for the transformations.</li>\n<li><strong>requires</strong> (list[str]):\nList of ids of entities which are required by this\ntransformation.</li>\n<li><strong>creates</strong> (list[str]):\nList of ids of entities which are created by this\ntransformation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Output", "modulename": "DataBinder.Classes", "qualname": "Output", "kind": "class", "doc": "<p>A structure for storing output data.</p>\n\n<p>This is an alias for a Transformation to emphasise its derivation from\nconditional information.</p>\n", "bases": "DataBinder.Classes.topology_components.Transformation"}, {"fullname": "DataBinder.Classes.Output.__init__", "modulename": "DataBinder.Classes", "qualname": "Output.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>iden</strong> (str):\nUnique id for the transformations.</li>\n<li><strong>requires</strong> (list[str]):\nList of ids of entities which are required by this\ntransformation.</li>\n<li><strong>creates</strong> (list[str]):\nList of ids of entities which are created by this\ntransformation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Condition", "modulename": "DataBinder.Classes", "qualname": "Condition", "kind": "class", "doc": "<p>A structure containing condition information.</p>\n"}, {"fullname": "DataBinder.Classes.Condition.__init__", "modulename": "DataBinder.Classes", "qualname": "Condition.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>id</strong> (str):</p></li>\n<li><p><strong>unit</strong> (str):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.Condition.id", "modulename": "DataBinder.Classes", "qualname": "Condition.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.Condition.unit", "modulename": "DataBinder.Classes", "qualname": "Condition.unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "DataBinder.Classes.ConditionValue", "modulename": "DataBinder.Classes", "qualname": "ConditionValue", "kind": "class", "doc": "<p>A variant of a Condition when the value attribute is a single float.</p>\n", "bases": "DataBinder.Classes.conditions.Condition"}, {"fullname": "DataBinder.Classes.ConditionValue.__init__", "modulename": "DataBinder.Classes", "qualname": "ConditionValue.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>id</strong> (str):</p></li>\n<li><p><strong>value</strong> (float):</p></li>\n<li><p><strong>unit</strong> (str):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.ConditionValue.value", "modulename": "DataBinder.Classes", "qualname": "ConditionValue.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "DataBinder.Classes.ConditionArray", "modulename": "DataBinder.Classes", "qualname": "ConditionArray", "kind": "class", "doc": "<p>A variant of a Condition when the value attribute is a list of floats.</p>\n", "bases": "DataBinder.Classes.conditions.Condition"}, {"fullname": "DataBinder.Classes.ConditionArray.__init__", "modulename": "DataBinder.Classes", "qualname": "ConditionArray.__init__", "kind": "function", "doc": "<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><p><strong>id</strong> (str):</p></li>\n<li><p><strong>value</strong> (list):</p></li>\n<li><p><strong>unit</strong> (str):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iden</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "DataBinder.Classes.ConditionArray.value", "modulename": "DataBinder.Classes", "qualname": "ConditionArray.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]"}, {"fullname": "DataBinder.Compilers", "modulename": "DataBinder.Compilers", "kind": "module", "doc": "<p>For compiling structures into other encoded forms.</p>\n"}, {"fullname": "DataBinder.Compilers.topology_to_adjacency_matrix", "modulename": "DataBinder.Compilers", "qualname": "topology_to_adjacency_matrix", "kind": "function", "doc": "<p>Create an adjacency matrix from a topology.</p>\n\n<p>Prototype: transformations are edges, a '1' indicates an edge between two\nentities. This does not cover phenonmena such as bimolecular reactions (the\npresence of an edge is dependent on the presence of another entity).</p>\n\n<ul>\n<li>A value of 1 in A_ij_ means an edge from i to j</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nTopology to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adjacency_matrix</strong> (list[list]):\nAdjacency matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Compilers.topology_to_equation", "modulename": "DataBinder.Compilers", "qualname": "topology_to_equation", "kind": "function", "doc": "<p>Convert a topology to an equation string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (Topology):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>equation</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Compilers.topology_to_equation_system", "modulename": "DataBinder.Compilers", "qualname": "topology_to_equation_system", "kind": "function", "doc": "<p>Create a system of equations from a topology</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nTopology to be converted.</li>\n<li><strong>unwrap_constants</strong> (bool):\nTrue: write the value stored in a Constant into output (e.g. 1.0).\nFalse: write a token value for a Constant into output (e.g. C[n]).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>equations</strong> (str):\nSystem of equations derived from the topology.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">unwrap_constants</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Compilers.topology_to_stoichiometric_matrix", "modulename": "DataBinder.Compilers", "qualname": "topology_to_stoichiometric_matrix", "kind": "function", "doc": "<p>Create an stoichiometric matrix from a topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>topology</strong> (DataBinder.Classes.Topology):\nTopology to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>stoichiometric_matrix</strong> (list[list]):\nAdjacency matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Compilers.topology_to_function", "modulename": "DataBinder.Compilers", "qualname": "topology_to_function", "kind": "function", "doc": "<p>Create a python function from a topology.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>topology</strong> (DataBinder.Classes.Topology):</p></li>\n<li><p><strong>unwrap_constants</strong> (bool):\nTrue: write the value stored in a Constant into output (e.g. 1.0).\nFalse: write a token value for a Constant into output (e.g. C[n]).</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>function_text</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">function_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;model_function&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">unwrap_constants</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors", "modulename": "DataBinder.Constructors", "kind": "module", "doc": "<p>Constructors for objects</p>\n"}, {"fullname": "DataBinder.Constructors.topology_from_string", "modulename": "DataBinder.Constructors", "qualname": "topology_from_string", "kind": "function", "doc": "<p>Create a topology from a string of transformation tokens separatad by\nnewlines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (Classes.Topology):\nCreated topology structure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors.topology_from_text_file", "modulename": "DataBinder.Constructors", "qualname": "topology_from_text_file", "kind": "function", "doc": "<p>Load a Topology structure from a file containing transformations.</p>\n\n<p>Example expected format:</p>\n\n<pre><code>A.B&gt;&gt;C\nC.D&gt;&gt;E.F\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nName of the file containing the data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (Classes.Topology):\nCreated topology structure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors.topology_from_list", "modulename": "DataBinder.Constructors", "qualname": "topology_from_list", "kind": "function", "doc": "<p>Create a topology from a string of transformation tokens separatad by\nnewlines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>terms</strong> (list[str]):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>topology</strong> (Classes.Topology):\nCreated topology structure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors.transformation_from_string", "modulename": "DataBinder.Constructors", "qualname": "transformation_from_string", "kind": "function", "doc": "<p>Create a transformation from a string.</p>\n\n<p>e.g. A.B>&gt;C.D</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>transform</strong> (Classes.Transformation):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">topology_components</span><span class=\"o\">.</span><span class=\"n\">Transformation</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors.data_container_from_csv", "modulename": "DataBinder.Constructors", "qualname": "data_container_from_csv", "kind": "function", "doc": "<p>Load a DataContainer from a structured .csv file.</p>\n\n<p>Expected structure example:</p>\n\n<pre><code>Dataset,example\nstart_conditions\nreactor_volume/ \u03bcL,411\nO=C(CO)CO/ M,2\n[OH-]/ M,0.12\nO/ M,55.5\nflow_profile_time/ s,0,1,2,3,800,1000,1200,1400,1600,1800\nO=C(CO)CO_flow_rate/ \u00b5l/h,9308.25,9308.25,9308.25,9308.25\nend_conditions\nstart_data\ntime/ s,compound_1/ M,compound_2/ M,compound_3/ M\n0,0.0002,0.0003,0.0007\nend_data\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nName of the file containing the data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data_container</strong> (DataBinder.Classes.DataContainer):\nDataContainer constructed from the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">data_container</span><span class=\"o\">.</span><span class=\"n\">DataContainer</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Constructors.data_container_from_string", "modulename": "DataBinder.Constructors", "qualname": "data_container_from_string", "kind": "function", "doc": "<p>Create a DataContainer from a string.</p>\n\n<p>Expected structure example:</p>\n\n<pre><code>Dataset,example\nstart_conditions\nreactor_volume/ \u03bcL,411\nO=C(CO)CO/ M,2\n[OH-]/ M,0.12\nO/ M,55.5\nflow_profile_time/ s,0,1,2,3,800,1000,1200,1400,1600,1800\nO=C(CO)CO_flow_rate/ \u00b5l/h,9308.25,9308.25,9308.25,9308.25\nend_conditions\nstart_data\ntime/ s,compound_1/ M,compound_2/ M,compound_3/ M\n0,0.0002,0.0003,0.0007\nend_data\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data_container</strong> (DataBinder.Classes.DataContainer):\nDataContainer constructed from the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DataBinder</span><span class=\"o\">.</span><span class=\"n\">Classes</span><span class=\"o\">.</span><span class=\"n\">data_container</span><span class=\"o\">.</span><span class=\"n\">DataContainer</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Decompilers", "modulename": "DataBinder.Decompilers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.adjacency_matrix", "modulename": "DataBinder.Decompilers.adjacency_matrix", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.adjacency_matrix.to_topology", "modulename": "DataBinder.Decompilers.adjacency_matrix.to_topology", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.equation", "modulename": "DataBinder.Decompilers.equation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.equation.to_topology", "modulename": "DataBinder.Decompilers.equation.to_topology", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.function", "modulename": "DataBinder.Decompilers.function", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Decompilers.function.to_topology", "modulename": "DataBinder.Decompilers.function.to_topology", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Inspectors", "modulename": "DataBinder.Inspectors", "kind": "module", "doc": "<p>For inspecting strings for values, units, tokens, etc.</p>\n"}, {"fullname": "DataBinder.Inspectors.patterns", "modulename": "DataBinder.Inspectors.patterns", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "DataBinder.Inspectors.patterns.token_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "token_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;([=@()A-Za-z0-9\\\\[\\\\]-]*)&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.exp_code_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "exp_code_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;Dataset,([A-Za-z0-9]*)&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.conditions_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "conditions_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;start_conditions([\\\\s\\\\S]*)end_conditions&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.data_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "data_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;start_data([\\\\s\\\\S]*)end_data&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.error_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "error_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;start_errors([\\\\s\\\\S]*)end_errors&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.unit_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "unit_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;/[ ]?([\\\\u00BF-\\\\u1FFF\\\\u2C00-\\\\uD7FF\\\\w/.]*)&#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.variable_pattern", "modulename": "DataBinder.Inspectors.patterns", "qualname": "variable_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;([=@()A-Za-z0-9_\\\\[\\\\]-]*)/ &#x27;)"}, {"fullname": "DataBinder.Inspectors.patterns.concentration_unit_patterns", "modulename": "DataBinder.Inspectors.patterns", "qualname": "concentration_unit_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[&#x27;/M&#x27;, &#x27;/ M&#x27;, &#x27;/mM&#x27;, &#x27;/ mM&#x27;, &#x27;/ \u03bcM&#x27;, &#x27;/\u03bcM&#x27;, &#x27;/\u03bcM&#x27;, &#x27;/ \u03bcM&#x27;, &#x27;M&#x27;, &#x27;M&#x27;, &#x27;mM&#x27;, &#x27;mM&#x27;, &#x27;\u03bcM&#x27;, &#x27;\u03bcM&#x27;, &#x27;\u03bcM&#x27;, &#x27;\u03bcM&#x27;]"}, {"fullname": "DataBinder.Inspectors.patterns.conc_units", "modulename": "DataBinder.Inspectors.patterns", "qualname": "conc_units", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[re.Pattern]", "default_value": "[re.compile(&#x27;/M&#x27;), re.compile(&#x27;/ M&#x27;), re.compile(&#x27;/mM&#x27;), re.compile(&#x27;/ mM&#x27;), re.compile(&#x27;/ \u03bcM&#x27;), re.compile(&#x27;/\u03bcM&#x27;), re.compile(&#x27;/\u03bcM&#x27;), re.compile(&#x27;/ \u03bcM&#x27;), re.compile(&#x27;M&#x27;), re.compile(&#x27;M&#x27;), re.compile(&#x27;mM&#x27;), re.compile(&#x27;mM&#x27;), re.compile(&#x27;\u03bcM&#x27;), re.compile(&#x27;\u03bcM&#x27;), re.compile(&#x27;\u03bcM&#x27;), re.compile(&#x27;\u03bcM&#x27;)]"}, {"fullname": "DataBinder.Inspectors.patterns.flow_unit_patterns", "modulename": "DataBinder.Inspectors.patterns", "qualname": "flow_unit_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[&#x27;/ \u03bcL/h&#x27;, &#x27;/\u03bcL/h&#x27;, &#x27;/ \u03bcL/h&#x27;, &#x27;/\u03bcL/h&#x27;, &#x27;/ \u00b5l/h&#x27;, &#x27;/\u00b5l/h&#x27;, &#x27;/ \u00b5L/h&#x27;, &#x27;\u03bcL/h&#x27;, &#x27;\u03bcL/h&#x27;, &#x27;\u03bcL/h&#x27;, &#x27;\u03bcL/h&#x27;, &#x27;\u00b5l/h&#x27;, &#x27;\u00b5l/h&#x27;, &#x27;\u00b5L/h&#x27;]"}, {"fullname": "DataBinder.Inspectors.patterns.flow_units", "modulename": "DataBinder.Inspectors.patterns", "qualname": "flow_units", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[re.Pattern]", "default_value": "[re.compile(&#x27;/ \u03bcL/h&#x27;), re.compile(&#x27;/\u03bcL/h&#x27;), re.compile(&#x27;/ \u03bcL/h&#x27;), re.compile(&#x27;/\u03bcL/h&#x27;), re.compile(&#x27;/ \u00b5l/h&#x27;), re.compile(&#x27;/\u00b5l/h&#x27;), re.compile(&#x27;/ \u00b5L/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u00b5l/h&#x27;), re.compile(&#x27;\u00b5l/h&#x27;), re.compile(&#x27;\u00b5L/h&#x27;)]"}, {"fullname": "DataBinder.Inspectors.patterns.time_unit_patterns", "modulename": "DataBinder.Inspectors.patterns", "qualname": "time_unit_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[&#x27;/ s&#x27;, &#x27;/s&#x27;, &#x27;/ min.&#x27;, &#x27;/min.&#x27;, &#x27;/ h&#x27;, &#x27;/h&#x27;, &#x27;s&#x27;, &#x27;s&#x27;, &#x27;min.&#x27;, &#x27;min.&#x27;, &#x27;h&#x27;, &#x27;h&#x27;]"}, {"fullname": "DataBinder.Inspectors.patterns.time_units", "modulename": "DataBinder.Inspectors.patterns", "qualname": "time_units", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[re.Pattern]", "default_value": "[re.compile(&#x27;/ \u03bcL/h&#x27;), re.compile(&#x27;/\u03bcL/h&#x27;), re.compile(&#x27;/ \u03bcL/h&#x27;), re.compile(&#x27;/\u03bcL/h&#x27;), re.compile(&#x27;/ \u00b5l/h&#x27;), re.compile(&#x27;/\u00b5l/h&#x27;), re.compile(&#x27;/ \u00b5L/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u03bcL/h&#x27;), re.compile(&#x27;\u00b5l/h&#x27;), re.compile(&#x27;\u00b5l/h&#x27;), re.compile(&#x27;\u00b5L/h&#x27;)]"}, {"fullname": "DataBinder.Inspectors.test_for", "modulename": "DataBinder.Inspectors.test_for", "kind": "module", "doc": "<p>Functions which test for things.</p>\n"}, {"fullname": "DataBinder.Inspectors.test_for.is_prime", "modulename": "DataBinder.Inspectors.test_for", "qualname": "is_prime", "kind": "function", "doc": "<p>Test if a number is prime.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>number</strong> (int):</p></li>\n<li><p><strong>primes_list</strong> (list[int]):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">primes_list</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Inspectors.test_for.is_float", "modulename": "DataBinder.Inspectors.test_for", "qualname": "is_float", "kind": "function", "doc": "<p>Test if an thing (e.g. str) can be converted to a float.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (any type):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">thing</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Inspectors.test_for.is_concentration_unit", "modulename": "DataBinder.Inspectors.test_for", "qualname": "is_concentration_unit", "kind": "function", "doc": "<p>Determine if the argument contains a concentration unit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Inspectors.test_for.is_flow_unit", "modulename": "DataBinder.Inspectors.test_for", "qualname": "is_flow_unit", "kind": "function", "doc": "<p>Determine if the argument contains a flow rate unit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "DataBinder.Inspectors.test_for.is_time_unit", "modulename": "DataBinder.Inspectors.test_for", "qualname": "is_time_unit", "kind": "function", "doc": "<p>Determine if the argument contains a concentration unit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();